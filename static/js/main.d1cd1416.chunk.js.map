{"version":3,"sources":["logo.svg","mybot.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Review","props","state","name","steps","address","yearsAtResidence","yearHouseBuilt","this","value","Component","defaultProps","PropTypes","object","mybot","style","width","height","contentStyle","id","message","trigger","user","options","label","component","asMessage","end","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,kLCMrCC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,EAAKF,MAAMG,MAAMD,MAAQ,GAC/BE,QAAS,EAAKJ,MAAMG,MAAMC,SAAW,GACrCC,iBAAkB,EAAKL,MAAMG,MAAME,kBAAoB,GACvDC,eAAgB,EAAKN,MAAMG,MAAMG,gBAAkB,IAPpC,E,qDAkBT,IAAD,EACoDC,KAAKN,MAAxBK,GADjC,EACCJ,KADD,EACOE,QADP,EACeC,iBADf,EACiCC,gBACxC,OAAIA,EAAeE,MAAQ,IAChB,gFAAsDF,EAAeE,MAArE,sDAEA,iI,GAxBMC,aAoCrBV,EAAOW,aAAe,CACpBP,MAAOQ,IAAUC,QA6DJC,MA1Df,WACE,OACE,kBAAC,IAAD,CAASC,MAAO,CAACC,MAAM,OAAQC,OAAO,QAASC,aAAc,CAACD,OAAO,QACnEb,MAAO,CACL,CACEe,GAAI,IACJC,QAAS,4BACTC,QAAS,QAEX,CACEF,GAAI,OACJG,MAAM,EACND,QAAS,KAEX,CACEF,GAAI,IACJC,QAAS,4CACTC,QAAS,WAEX,CACEF,GAAI,UACJG,MAAM,EACND,QAAS,KAEX,CACEF,GAAI,IACJC,QAAS,2DACTC,QAAS,oBAEX,CACEF,GAAI,mBACJI,QAAS,CACP,CAAEd,MAAO,mBAAoBe,MAAO,mBAAoBH,QAAS,KACjE,CAAEZ,MAAO,cAAee,MAAO,cAAeH,QAAS,KACvD,CAAEZ,MAAO,oBAAqBe,MAAO,oBAAqBH,QAAS,OAGvE,CACEF,GAAI,IACJC,QAAS,qCACTC,QAAS,kBAEX,CACEF,GAAI,iBACJG,MAAM,EACND,QAAS,KAEX,CACEF,GAAI,IACJM,UAAW,kBAAC,EAAD,MACXC,WAAW,EACXC,KAAK,OC5EAC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAAC,EAAD,MACA,0FCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,c","file":"static/js/main.d1cd1416.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ChatBot from 'react-simple-chatbot';\r\n\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\nclass Review extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: this.props.steps.name || '',\r\n      address: this.props.steps.address || '',\r\n      yearsAtResidence: this.props.steps.yearsAtResidence || '',\r\n      yearHouseBuilt: this.props.steps.yearHouseBuilt || '',\r\n    };\r\n  }\r\n\r\n  // componentWillMount() {\r\n  //   const { steps } = this.props;\r\n  //   const { name, policy, age } = steps;\r\n\r\n  //   this.setState({ name, policy, age });\r\n  // }\r\n\r\n  render() {\r\n    const { name, address,yearsAtResidence, yearHouseBuilt } = this.state;\r\n    if (yearHouseBuilt.value > 2000) {\r\n      return ( <div> Your house was built after 2000 (i.e. the year {yearHouseBuilt.value}), and thus your insurance premium is quite low!  </div> );\r\n    } else {\r\n      return ( <div> Your house was built before 2000, and thus, your insurance premium ranges from $500 to $700</div> );\r\n    } \r\n\r\n\r\n  }\r\n\r\n}\r\n\r\nReview.propTypes = {\r\n  steps: PropTypes.object,\r\n};\r\n\r\nReview.defaultProps = {\r\n  steps: PropTypes.object,\r\n};\r\n\r\nfunction mybot() {\r\n  return (\r\n    <ChatBot style={{width:'80vw', height:'40vw'}} contentStyle={{height:'32vw'}}\r\n      steps={[\r\n        {\r\n          id: '1',\r\n          message: 'Hello! What is your name?',\r\n          trigger: 'name',\r\n        },\r\n        {\r\n          id: 'name',\r\n          user: true,\r\n          trigger: '2',\r\n        },\r\n        {\r\n          id: '2',\r\n          message: 'Hi {previousValue}! What is your address?',\r\n          trigger: 'address',\r\n        },\r\n        {\r\n          id: 'address',\r\n          user: true,\r\n          trigger: '3', \r\n        },\r\n        {\r\n          id: '3',\r\n          message: 'How many years have you spent at your current residence?',\r\n          trigger: 'yearsAtResidence',\r\n        },\r\n        {\r\n          id: 'yearsAtResidence',\r\n          options: [\r\n            { value: 'Less than 1 Year', label: 'Less than 1 year', trigger: '4' },\r\n            { value: '1 - 3 years', label: '1 - 3 years', trigger: '4' },\r\n            { value: 'More than 3 years', label: 'More than 3 years', trigger: '4' },\r\n          ],\r\n        },\r\n        {\r\n          id: '4',\r\n          message: 'What year was your home built in? ',\r\n          trigger: 'yearHouseBuilt',\r\n        },\r\n        {\r\n          id: 'yearHouseBuilt',\r\n          user: true,\r\n          trigger: '5',\r\n        },\r\n        {\r\n          id: '5',\r\n          component: <Review />,\r\n          asMessage: true,\r\n          end: true,\r\n        }\r\n      ]}\r\n    />  \r\n  );\r\n}\r\n\r\nexport default mybot;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Chatbot from './mybot';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <Chatbot />\n        <p>\n          Hey! This is Insure-Al, your friendly Insurance Advisor! \n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}